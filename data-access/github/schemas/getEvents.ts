import { z } from 'zod';

const actor = z.object({
  id: z.number().int(),
  login: z.string(),
  display_login: z.string().optional(),
  gravatar_id: z.union([z.string(), z.null()]),
  url: z.string().url(),
  avatar_url: z.string().url(),
});
const simple_user = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  email: z.union([z.string(), z.null()]).optional(),
  login: z.string(),
  id: z.number().int(),
  node_id: z.string(),
  avatar_url: z.string().url(),
  gravatar_id: z.union([z.string(), z.null()]),
  url: z.string().url(),
  html_url: z.string().url(),
  followers_url: z.string().url(),
  following_url: z.string(),
  gists_url: z.string(),
  starred_url: z.string(),
  subscriptions_url: z.string().url(),
  organizations_url: z.string().url(),
  repos_url: z.string().url(),
  events_url: z.string(),
  received_events_url: z.string().url(),
  type: z.string(),
  site_admin: z.boolean(),
  starred_at: z.string().optional(),
});
const milestone = z.object({
  url: z.string().url(),
  html_url: z.string().url(),
  labels_url: z.string().url(),
  id: z.number().int(),
  node_id: z.string(),
  number: z.number().int(),
  state: z.enum(['open', 'closed']).default('open'),
  title: z.string(),
  description: z.union([z.string(), z.null()]),
  creator: z.union([z.null(), simple_user.passthrough()]),
  open_issues: z.number().int(),
  closed_issues: z.number().int(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
  closed_at: z.union([z.string(), z.null()]),
  due_on: z.union([z.string(), z.null()]),
});
const license_simple = z.object({
  key: z.string(),
  name: z.string(),
  url: z.union([z.string(), z.null()]),
  spdx_id: z.union([z.string(), z.null()]),
  node_id: z.string(),
  html_url: z.string().url().optional(),
});
const repository = z.object({
  id: z.number().int(),
  node_id: z.string(),
  name: z.string(),
  full_name: z.string(),
  license: z.union([z.null(), license_simple.passthrough()]),
  organization: z.union([z.null(), simple_user.passthrough()]).optional(),
  forks: z.number().int(),
  permissions: z
    .object({
      admin: z.boolean(),
      pull: z.boolean(),
      triage: z.boolean().optional(),
      push: z.boolean(),
      maintain: z.boolean().optional(),
    })
    .optional(),
  owner: simple_user,
  private: z.boolean(),
  html_url: z.string().url(),
  description: z.union([z.string(), z.null()]),
  fork: z.boolean(),
  url: z.string().url(),
  archive_url: z.string(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string().url(),
  deployments_url: z.string().url(),
  downloads_url: z.string().url(),
  events_url: z.string().url(),
  forks_url: z.string().url(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  git_url: z.string(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  languages_url: z.string().url(),
  merges_url: z.string().url(),
  milestones_url: z.string(),
  notifications_url: z.string(),
  pulls_url: z.string(),
  releases_url: z.string(),
  ssh_url: z.string(),
  stargazers_url: z.string().url(),
  statuses_url: z.string(),
  subscribers_url: z.string().url(),
  subscription_url: z.string().url(),
  tags_url: z.string().url(),
  teams_url: z.string().url(),
  trees_url: z.string(),
  clone_url: z.string(),
  mirror_url: z.union([z.string(), z.null()]),
  hooks_url: z.string().url(),
  svn_url: z.string().url(),
  homepage: z.union([z.string(), z.null()]),
  language: z.union([z.string(), z.null()]),
  forks_count: z.number().int(),
  stargazers_count: z.number().int(),
  watchers_count: z.number().int(),
  size: z.number().int(),
  default_branch: z.string(),
  open_issues_count: z.number().int(),
  is_template: z.boolean().optional(),
  topics: z.array(z.string()).optional(),
  has_issues: z.boolean().default(true),
  has_projects: z.boolean().default(true),
  has_wiki: z.boolean().default(true),
  has_pages: z.boolean(),
  has_downloads: z.boolean().default(true),
  has_discussions: z.boolean().optional(),
  archived: z.boolean(),
  disabled: z.boolean(),
  visibility: z.string().optional().default('public'),
  pushed_at: z.union([z.string(), z.null()]),
  created_at: z.union([z.string(), z.null()]),
  updated_at: z.union([z.string(), z.null()]),
  allow_rebase_merge: z.boolean().optional().default(true),
  template_repository: z
    .union([
      z
        .object({
          id: z.number().int(),
          node_id: z.string(),
          name: z.string(),
          full_name: z.string(),
          owner: z
            .object({
              login: z.string(),
              id: z.number().int(),
              node_id: z.string(),
              avatar_url: z.string(),
              gravatar_id: z.string(),
              url: z.string(),
              html_url: z.string(),
              followers_url: z.string(),
              following_url: z.string(),
              gists_url: z.string(),
              starred_url: z.string(),
              subscriptions_url: z.string(),
              organizations_url: z.string(),
              repos_url: z.string(),
              events_url: z.string(),
              received_events_url: z.string(),
              type: z.string(),
              site_admin: z.boolean(),
            })
            .partial(),
          private: z.boolean(),
          html_url: z.string(),
          description: z.string(),
          fork: z.boolean(),
          url: z.string(),
          archive_url: z.string(),
          assignees_url: z.string(),
          blobs_url: z.string(),
          branches_url: z.string(),
          collaborators_url: z.string(),
          comments_url: z.string(),
          commits_url: z.string(),
          compare_url: z.string(),
          contents_url: z.string(),
          contributors_url: z.string(),
          deployments_url: z.string(),
          downloads_url: z.string(),
          events_url: z.string(),
          forks_url: z.string(),
          git_commits_url: z.string(),
          git_refs_url: z.string(),
          git_tags_url: z.string(),
          git_url: z.string(),
          issue_comment_url: z.string(),
          issue_events_url: z.string(),
          issues_url: z.string(),
          keys_url: z.string(),
          labels_url: z.string(),
          languages_url: z.string(),
          merges_url: z.string(),
          milestones_url: z.string(),
          notifications_url: z.string(),
          pulls_url: z.string(),
          releases_url: z.string(),
          ssh_url: z.string(),
          stargazers_url: z.string(),
          statuses_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          tags_url: z.string(),
          teams_url: z.string(),
          trees_url: z.string(),
          clone_url: z.string(),
          mirror_url: z.string(),
          hooks_url: z.string(),
          svn_url: z.string(),
          homepage: z.string(),
          language: z.string(),
          forks_count: z.number().int(),
          stargazers_count: z.number().int(),
          watchers_count: z.number().int(),
          size: z.number().int(),
          default_branch: z.string(),
          open_issues_count: z.number().int(),
          is_template: z.boolean(),
          topics: z.array(z.string()),
          has_issues: z.boolean(),
          has_projects: z.boolean(),
          has_wiki: z.boolean(),
          has_pages: z.boolean(),
          has_downloads: z.boolean(),
          archived: z.boolean(),
          disabled: z.boolean(),
          visibility: z.string(),
          pushed_at: z.string(),
          created_at: z.string(),
          updated_at: z.string(),
          permissions: z
            .object({
              admin: z.boolean(),
              maintain: z.boolean(),
              push: z.boolean(),
              triage: z.boolean(),
              pull: z.boolean(),
            })
            .partial(),
          allow_rebase_merge: z.boolean(),
          temp_clone_token: z.string(),
          allow_squash_merge: z.boolean(),
          allow_auto_merge: z.boolean(),
          delete_branch_on_merge: z.boolean(),
          allow_update_branch: z.boolean(),
          use_squash_pr_title_as_default: z.boolean(),
          squash_merge_commit_title: z.enum(['PR_TITLE', 'COMMIT_OR_PR_TITLE']),
          squash_merge_commit_message: z.enum(['PR_BODY', 'COMMIT_MESSAGES', 'BLANK']),
          merge_commit_title: z.enum(['PR_TITLE', 'MERGE_MESSAGE']),
          merge_commit_message: z.enum(['PR_BODY', 'PR_TITLE', 'BLANK']),
          allow_merge_commit: z.boolean(),
          subscribers_count: z.number().int(),
          network_count: z.number().int(),
        })
        .partial(),
      z.null(),
    ])
    .optional(),
  temp_clone_token: z.string().optional(),
  allow_squash_merge: z.boolean().optional().default(true),
  allow_auto_merge: z.boolean().optional(),
  delete_branch_on_merge: z.boolean().optional(),
  allow_update_branch: z.boolean().optional(),
  use_squash_pr_title_as_default: z.boolean().optional(),
  squash_merge_commit_title: z.enum(['PR_TITLE', 'COMMIT_OR_PR_TITLE']).optional(),
  squash_merge_commit_message: z.enum(['PR_BODY', 'COMMIT_MESSAGES', 'BLANK']).optional(),
  merge_commit_title: z.enum(['PR_TITLE', 'MERGE_MESSAGE']).optional(),
  merge_commit_message: z.enum(['PR_BODY', 'PR_TITLE', 'BLANK']).optional(),
  allow_merge_commit: z.boolean().optional().default(true),
  allow_forking: z.boolean().optional(),
  web_commit_signoff_required: z.boolean().optional(),
  subscribers_count: z.number().int().optional(),
  network_count: z.number().int().optional(),
  open_issues: z.number().int(),
  watchers: z.number().int(),
  master_branch: z.string().optional(),
  starred_at: z.string().optional(),
  anonymous_access_enabled: z.boolean().optional(),
});
const integration = z.object({
  id: z.number().int(),
  slug: z.string().optional(),
  node_id: z.string(),
  owner: z.union([z.null(), simple_user.passthrough()]),
  name: z.string(),
  description: z.union([z.string(), z.null()]),
  external_url: z.string().url(),
  html_url: z.string().url(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
  permissions: z.record(z.string()),
  events: z.array(z.string()),
  installations_count: z.number().int().optional(),
  client_id: z.string().optional(),
  client_secret: z.string().optional(),
  webhook_secret: z.union([z.string(), z.null()]).optional(),
  pem: z.string().optional(),
});
const author_association = z.enum([
  'COLLABORATOR',
  'CONTRIBUTOR',
  'FIRST_TIMER',
  'FIRST_TIME_CONTRIBUTOR',
  'MANNEQUIN',
  'MEMBER',
  'NONE',
  'OWNER',
]);
const reaction_rollup = z.object({
  url: z.string().url(),
  total_count: z.number().int(),
  '+1': z.number().int(),
  '-1': z.number().int(),
  laugh: z.number().int(),
  confused: z.number().int(),
  heart: z.number().int(),
  hooray: z.number().int(),
  eyes: z.number().int(),
  rocket: z.number().int(),
});
const issue = z.object({
  id: z.number().int(),
  node_id: z.string(),
  url: z.string().url(),
  repository_url: z.string().url(),
  labels_url: z.string(),
  comments_url: z.string().url(),
  events_url: z.string().url(),
  html_url: z.string().url(),
  number: z.number().int(),
  state: z.string(),
  state_reason: z.union([z.enum(['completed', 'reopened', 'not_planned', 'null']), z.null()]).optional(),
  title: z.string(),
  body: z.union([z.string(), z.null()]).optional(),
  user: z.union([z.null(), simple_user.passthrough()]),
  labels: z.array(
    z.union([
      z.string(),
      z
        .object({
          id: z.number().int(),
          node_id: z.string(),
          url: z.string().url(),
          name: z.string(),
          description: z.union([z.string(), z.null()]),
          color: z.union([z.string(), z.null()]),
          default: z.boolean(),
        })
        .partial(),
    ]),
  ),
  assignee: z.union([z.null(), simple_user.passthrough()]),
  assignees: z.union([z.array(simple_user), z.null()]).optional(),
  milestone: z.union([z.null(), milestone.passthrough()]),
  locked: z.boolean(),
  active_lock_reason: z.union([z.string(), z.null()]).optional(),
  comments: z.number().int(),
  pull_request: z
    .object({
      merged_at: z.union([z.string(), z.null()]).optional(),
      diff_url: z.union([z.string(), z.null()]),
      html_url: z.union([z.string(), z.null()]),
      patch_url: z.union([z.string(), z.null()]),
      url: z.union([z.string(), z.null()]),
    })
    .optional(),
  closed_at: z.union([z.string(), z.null()]),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
  draft: z.boolean().optional(),
  closed_by: z.union([z.null(), simple_user.passthrough()]).optional(),
  body_html: z.string().optional(),
  body_text: z.string().optional(),
  timeline_url: z.string().url().optional(),
  repository: repository.optional(),
  performed_via_github_app: z.union([z.null(), integration.passthrough()]).optional(),
  author_association: author_association,
  reactions: reaction_rollup.optional(),
});
const issue_comment = z.object({
  id: z.number().int(),
  node_id: z.string(),
  url: z.string().url(),
  body: z.string().optional(),
  body_text: z.string().optional(),
  body_html: z.string().optional(),
  html_url: z.string().url(),
  user: z.union([z.null(), simple_user.passthrough()]),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
  issue_url: z.string().url(),
  author_association: author_association,
  performed_via_github_app: z.union([z.null(), integration.passthrough()]).optional(),
  reactions: reaction_rollup.optional(),
});

const event = z.object({
  id: z.string(),
  type: z.union([z.string(), z.null()]),
  actor: actor,
  repo: z.object({ id: z.number().int(), name: z.string(), url: z.string().url() }),
  org: actor.optional(),
  payload: z
    .object({
      action: z.string(),
      issue: issue,
      comment: issue_comment,
      pages: z.array(
        z
          .object({
            page_name: z.string(),
            title: z.string(),
            summary: z.union([z.string(), z.null()]),
            action: z.string(),
            sha: z.string(),
            html_url: z.string(),
          })
          .partial(),
      ),
    })
    .partial()
    // TODO: https://github.com/github/rest-api-description/issues/1318
    .passthrough(),
  public: z.boolean(),
  created_at: z.union([z.string(), z.null()]),
});

export const eventSchema = z.array(event);
